
### **프로젝트: 대화형 어휘 학습 뷰어 요구사항 명세서 (SRS)**

#### **1. 프로젝트 개요**

본 프로젝트는 특정 디렉토리 구조에 저장된 JSON 데이터(스토리, 챕터, 단어)를 기반으로, 사용자가 웹 브라우저를 통해 대화형으로 어휘를 학습할 수 있는 웹 애플리케이션을 구축하는 것을 목표로 한다.

이 시스템은 두 가지 독립적인 실행 모드를 가진다.
1.  **동적 웹 서버**: 실시간으로 사용자 요청에 따라 학습 페이지를 생성하여 제공한다.
2.  **정적 파일 생성기**: 모든 학습 페이지를 미리 `.html` 파일로 생성하여, 서버 없이도 작동 가능하게 한다.

#### **2. 핵심 데이터 구조**

시스템이 읽어들일 데이터는 다음의 디렉토리 구조를 엄격히 준수해야 한다.

```
/data                 <- (예시) 최상위 데이터 폴더
└── /The Last Paradox/  <- "Set" 폴더 (시리즈 제목)
    ├── stories/
    │   └── /part1/     <- "Part" 폴더 (파트 번호)
    │       └── stories.json
    └── words_table/
        └── /part1/
            ├── chapter0.json
            └── chapter1.json
```

-   **`stories.json` 파일 형식**:
    -   `part_title` (string): 파트의 제목.
    -   `genre` (string): 장르 정보.
    -   `stories` (array): 챕터 객체들의 배열.
    -   각 챕터 객체는 `chapter_title`, `chapter_num`, `ref_word_table`(참조할 단어 파일명), `paragraphs` 배열을 포함한다.
    -   `paragraphs` 배열은 내부에 `sentences` 배열을 가진 객체들의 배열이다.
    -   `sentences` 배열은 `{ "english": "...", "korean": "..." }` 객체들의 배열이다.

-   **`chapterN.json` 파일 형식**:
    -   `words` (array): 단어 객체들의 배열.
    -   각 단어 객체는 `id`, `term`, `synonyms`, `kor_meaning` 등의 필드를 가진다.

#### **3. 공통 기능 요구사항**

-   **단어 태그 처리 (`processWordTags`)**:
    -   `stories.json`의 `english` 문장 내 `<word id='...' class='word-eng-link'>...</word>` 태그는 반드시 `<span class="word-link" data-word-id="...">...</span>` HTML 태그로 변환되어야 한다.
    -   `korean` 문장 내 `<word id='...' class='word-target-kr'>...</word>` 태그는 반드시 `<span class="word-target-kr">...</span>` HTML 태그로 변환되어야 한다.

#### **4. 프로그램 1: 동적 웹 서버 (`server.js`) 명세**

-   **기술 스택**: Node.js, Express.js, EJS 템플릿 엔진.
-   **기본 설정**:
    -   `public` 폴더와 `data` 폴더를 정적 파일 제공 경로로 설정해야 한다.
-   **라우팅 (Routing)**:
    -   **루트 경로 (`/`): 스토리 선택 페이지**
        -   `data` 폴더를 스캔하여 모든 `set`과 그 하위의 `part`를 탐색한다.
        -   각 `set/part`에 대한 정보를 `{ seriesTitle, partTitle, partNumber, genre, url, coverImagePath }` 객체로 구성하여 배열로 만든다.
        -   커버 이미지는 해당 `part` 폴더 내의 `cover.jpg` 또는 `cover.png`를 우선적으로 찾고, 없을 경우 `/images/default-cover.jpg`를 기본값으로 사용한다.
        -   생성된 목록을 `views/index.ejs` 템플릿에 전달하여 렌더링한다.
    -   **뷰어 경로 (`/view?set=...&part=...`)**:
        -   `set`과 `part` 쿼리 파라미터를 받아 해당 스토리 파트의 데이터를 로드한다.
        -   `stories.json`을 읽고, 그 안의 `ref_word_table`을 참조하여 관련된 모든 `chapterN.json`의 단어 데이터를 취합한다.
        -   모든 단어 파일의 원본 내용을 기준으로 MD5 해시를 생성하여 캐시 무력화에 사용한다.
        -   모든 데이터를 `views/viewer.ejs` 템플릿에 전달하여 최종 뷰어 페이지를 렌더링한다.

#### **5. 프로그램 2: 정적 HTML 생성기 (`generate_html.js`) 명세**

-   **실행**: `node generate_html.js` 명령어로 실행된다.
-   **설정 파일**: 프로젝트 루트의 `active_data.json` 파일을 읽는다.
    -   `active_directory` (string): 처리할 데이터가 있는 폴더 경로.
    -   `active_output` (string): 결과 HTML 파일이 저장될 폴더 경로.
-   **실행 로직**:
    1.  서버의 `/` 라우트와 동일한 방식으로 모든 `set/part`를 탐색한다.
    2.  각 'part'에 대해, 서버의 `/view` 라우트와 동일한 로직으로 모든 데이터를 취합한다.
    3.  `ejs.renderFile`을 사용하여 `views/viewer.ejs` 템플릿과 취합된 데이터를 합쳐 완전한 HTML 문자열을 생성한다.
    4.  `active_output` 폴더에 `{part이름}_{파트제목}.html` 형식의 파일명으로 결과물을 저장한다. (파일명에 부적합한 문자는 제거)

#### **6. 공통 UI 템플릿 명세**

##### **6.1. `views/index.ejs` (스토리 선택 페이지)**

-   **레이아웃**: 여러 책이 다단으로 진열된 '책장' 형태로 디자인되어야 한다.
-   **책 오브젝트**:
    -   각 책은 앞면(cover)이 보이도록 표시된다.
    -   배경 이미지는 서버에서 전달된 `coverImagePath`를 사용한다.
    -   책 표지 위에는 두 줄로 제목이 표시된다.
        -   **메인 제목**: 시리즈 제목(`seriesTitle`)을 더 크고 굵은 글씨로 표시한다.
        -   **부제**: `Part [번호]: [파트 제목]` 형식을 중간 크기 글씨로 표시한다.
    -   책 아래에는 '명패' 스타일로 장르(`genre`) 정보가 표시된다.

##### **6.2. `views/viewer.ejs` (뷰어 페이지)**

-   **레이아웃**: 상단에 컨트롤 패널, 그 아래에 본문 영역이 위치한다.
-   **내비게이션**:
    -   '📚 책장으로' 버튼이 있어 클릭 시 `/` 경로로 이동해야 한다.
    -   챕터 번호 링크를 클릭하면 해당 챕터 페이지로 이동해야한다.
-   **팝업 및 상호작용**:
    -   **단어 팝업**: 영어 본문의 파란 밑줄 단어(`.word-link`)를 **더블클릭**하면, 해당 단어 바로 위에 단어 정보 팝업이 나타나야 한다.
    -   **문장 번역 팝업**: 영어 문단 내의 각 문장(`.sentence-unit`)을 **더블클릭**하면, 해당 문장 바로 위에 한국어 번역 팝업이 나타나야 한다.
    -   **하이라이트**: 문장 번역 팝업이 나타날 때, 원본 영어 문장에만 형광펜 효과가 적용되어야 하며, 이때 그 안의 단어 링크 스타일은 덮어쓰지 않고 유지되어야 한다.
    -   **팝업 닫기**: 모든 팝업은 바깥의 어두운 영역을 클릭하거나 `Esc` 키를 누르면 닫혀야 한다. 단어 팝업은 'X' 버튼이 없어야 한다.
    -   **레이아웃 시프트 방지**: 어떤 팝업/시트가 나타나도, 브라우저 스크롤바가 사라지면서 발생하는 화면 흔들림이 없어야 한다. (자바스크립트로 `padding-right` 보정)
-   **바텀 시트 (Bottom Sheets)**:
    -   '목차 보기', '단어 목록 보기' 버튼 클릭 시, 화면 하단에서 해당 내용이 담긴 시트가 슬라이드되어 올라와야 한다.
    -   '단어 목록 보기'는 현재 보고 있는 챕터의 단어 목록만 표시해야 한다.